{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-17T18:36:20.719905Z","iopub.execute_input":"2024-04-17T18:36:20.720882Z","iopub.status.idle":"2024-04-17T18:36:20.729646Z","shell.execute_reply.started":"2024-04-17T18:36:20.720849Z","shell.execute_reply":"2024-04-17T18:36:20.728567Z"},"trusted":true},"execution_count":114,"outputs":[{"name":"stdout","text":"/kaggle/input/nlp-getting-started/sample_submission.csv\n/kaggle/input/nlp-getting-started/train.csv\n/kaggle/input/nlp-getting-started/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"!pip install spacy_cleaner","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:20.731456Z","iopub.execute_input":"2024-04-17T18:36:20.731789Z","iopub.status.idle":"2024-04-17T18:36:33.554728Z","shell.execute_reply.started":"2024-04-17T18:36:20.731754Z","shell.execute_reply":"2024-04-17T18:36:33.553528Z"},"trusted":true},"execution_count":115,"outputs":[{"name":"stderr","text":"huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...\nTo disable this warning, you can either:\n\t- Avoid using `tokenizers` before the fork if possible\n\t- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: spacy_cleaner in /opt/conda/lib/python3.10/site-packages (3.2.1)\nRequirement already satisfied: spacy<3.8.0,>=3.7.2 in /opt/conda/lib/python3.10/site-packages (from spacy_cleaner) (3.7.2)\nRequirement already satisfied: spacy-lookups-data<1.1.0,>=1.0.5 in /opt/conda/lib/python3.10/site-packages (from spacy_cleaner) (1.0.5)\nRequirement already satisfied: tqdm<4.67.0,>=4.66.1 in /opt/conda/lib/python3.10/site-packages (from spacy_cleaner) (4.66.1)\nRequirement already satisfied: types-tqdm<5.0.0.0,>=4.66.0.5 in /opt/conda/lib/python3.10/site-packages (from spacy_cleaner) (4.66.0.20240417)\nRequirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.0.12)\nRequirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (1.0.5)\nRequirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (1.0.10)\nRequirement already satisfied: cymem<2.1.0,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.0.8)\nRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.0.9)\nRequirement already satisfied: thinc<8.3.0,>=8.1.8 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (8.2.2)\nRequirement already satisfied: wasabi<1.2.0,>=0.9.1 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (1.1.2)\nRequirement already satisfied: srsly<3.0.0,>=2.4.3 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.4.8)\nRequirement already satisfied: catalogue<2.1.0,>=2.0.6 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.0.10)\nRequirement already satisfied: weasel<0.4.0,>=0.1.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (0.3.4)\nRequirement already satisfied: typer<0.10.0,>=0.3.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (0.9.0)\nRequirement already satisfied: smart-open<7.0.0,>=5.2.1 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (6.4.0)\nRequirement already satisfied: requests<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.31.0)\nRequirement already satisfied: pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.5.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.1.2)\nRequirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (69.0.3)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (21.3)\nRequirement already satisfied: langcodes<4.0.0,>=3.2.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.3.0)\nRequirement already satisfied: numpy>=1.19.0 in /opt/conda/lib/python3.10/site-packages (from spacy<3.8.0,>=3.7.2->spacy_cleaner) (1.26.4)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.1.1)\nRequirement already satisfied: annotated-types>=0.4.0 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->spacy_cleaner) (0.6.0)\nRequirement already satisfied: pydantic-core==2.14.6 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.14.6)\nRequirement already satisfied: typing-extensions>=4.6.1 in /opt/conda/lib/python3.10/site-packages (from pydantic!=1.8,!=1.8.1,<3.0.0,>=1.7.4->spacy<3.8.0,>=3.7.2->spacy_cleaner) (4.9.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (3.6)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3.0.0,>=2.13.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (2024.2.2)\nRequirement already satisfied: blis<0.8.0,>=0.7.8 in /opt/conda/lib/python3.10/site-packages (from thinc<8.3.0,>=8.1.8->spacy<3.8.0,>=3.7.2->spacy_cleaner) (0.7.10)\nRequirement already satisfied: confection<1.0.0,>=0.0.1 in /opt/conda/lib/python3.10/site-packages (from thinc<8.3.0,>=8.1.8->spacy<3.8.0,>=3.7.2->spacy_cleaner) (0.1.4)\nRequirement already satisfied: click<9.0.0,>=7.1.1 in /opt/conda/lib/python3.10/site-packages (from typer<0.10.0,>=0.3.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (8.1.7)\nRequirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from weasel<0.4.0,>=0.1.0->spacy<3.8.0,>=3.7.2->spacy_cleaner) (0.16.0)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->spacy<3.8.0,>=3.7.2->spacy_cleaner) (2.1.3)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Required Imports","metadata":{}},{"cell_type":"code","source":"import numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nimport spacy\nimport spacy_cleaner\nfrom spacy_cleaner.processing import removers,mutators,helpers\nimport torch\nfrom sklearn.model_selection import train_test_split\nimport re\nfrom transformers import (\n    AutoTokenizer,\n    DataCollator,\n    DataCollatorWithPadding,\n    AutoModelForSequenceClassification,\n    Trainer,\n    TrainingArguments,\n)\nfrom datasets import Dataset, load_metric\n\nos.environ[\"WANDB_DISABLED\"] = \"True\"","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.557129Z","iopub.execute_input":"2024-04-17T18:36:33.557548Z","iopub.status.idle":"2024-04-17T18:36:33.564721Z","shell.execute_reply.started":"2024-04-17T18:36:33.557510Z","shell.execute_reply":"2024-04-17T18:36:33.563737Z"},"trusted":true},"execution_count":116,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/nlp-getting-started/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/nlp-getting-started/test.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.566145Z","iopub.execute_input":"2024-04-17T18:36:33.566487Z","iopub.status.idle":"2024-04-17T18:36:33.614085Z","shell.execute_reply.started":"2024-04-17T18:36:33.566461Z","shell.execute_reply":"2024-04-17T18:36:33.613208Z"},"trusted":true},"execution_count":117,"outputs":[]},{"cell_type":"markdown","source":"## Data Analysis ","metadata":{}},{"cell_type":"code","source":"train.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.616322Z","iopub.execute_input":"2024-04-17T18:36:33.616712Z","iopub.status.idle":"2024-04-17T18:36:33.630709Z","shell.execute_reply.started":"2024-04-17T18:36:33.616681Z","shell.execute_reply":"2024-04-17T18:36:33.629536Z"},"trusted":true},"execution_count":118,"outputs":[{"execution_count":118,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n5   8     NaN      NaN  #RockyFire Update => California Hwy. 20 closed...   \n6  10     NaN      NaN  #flood #disaster Heavy rain causes flash flood...   \n7  13     NaN      NaN  I'm on top of the hill and I can see a fire in...   \n8  14     NaN      NaN  There's an emergency evacuation happening now ...   \n9  15     NaN      NaN  I'm afraid that the tornado is coming to our a...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  \n5       1  \n6       1  \n7       1  \n8       1  \n9       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>8</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>#RockyFire Update =&gt; California Hwy. 20 closed...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>10</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>#flood #disaster Heavy rain causes flash flood...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>I'm on top of the hill and I can see a fire in...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>There's an emergency evacuation happening now ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>15</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>I'm afraid that the tornado is coming to our a...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"len(train)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.632060Z","iopub.execute_input":"2024-04-17T18:36:33.632484Z","iopub.status.idle":"2024-04-17T18:36:33.639384Z","shell.execute_reply.started":"2024-04-17T18:36:33.632454Z","shell.execute_reply":"2024-04-17T18:36:33.638144Z"},"trusted":true},"execution_count":119,"outputs":[{"execution_count":119,"output_type":"execute_result","data":{"text/plain":"7613"},"metadata":{}}]},{"cell_type":"code","source":"len(train[\"keyword\"].unique())","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.640724Z","iopub.execute_input":"2024-04-17T18:36:33.641045Z","iopub.status.idle":"2024-04-17T18:36:33.648749Z","shell.execute_reply.started":"2024-04-17T18:36:33.641019Z","shell.execute_reply":"2024-04-17T18:36:33.647624Z"},"trusted":true},"execution_count":120,"outputs":[{"execution_count":120,"output_type":"execute_result","data":{"text/plain":"222"},"metadata":{}}]},{"cell_type":"code","source":"train[\"keyword\"].value_counts().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.649932Z","iopub.execute_input":"2024-04-17T18:36:33.650251Z","iopub.status.idle":"2024-04-17T18:36:33.661313Z","shell.execute_reply.started":"2024-04-17T18:36:33.650224Z","shell.execute_reply":"2024-04-17T18:36:33.660222Z"},"trusted":true},"execution_count":121,"outputs":[{"execution_count":121,"output_type":"execute_result","data":{"text/plain":"7552"},"metadata":{}}]},{"cell_type":"code","source":"# So we can't drop the keyword columns ,\n#cause it has values almost equal to total length of train df","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.715491Z","iopub.execute_input":"2024-04-17T18:36:33.716117Z","iopub.status.idle":"2024-04-17T18:36:33.720871Z","shell.execute_reply.started":"2024-04-17T18:36:33.716079Z","shell.execute_reply":"2024-04-17T18:36:33.719740Z"},"trusted":true},"execution_count":126,"outputs":[]},{"cell_type":"code","source":"train[\"location\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.662397Z","iopub.execute_input":"2024-04-17T18:36:33.662684Z","iopub.status.idle":"2024-04-17T18:36:33.676888Z","shell.execute_reply.started":"2024-04-17T18:36:33.662652Z","shell.execute_reply":"2024-04-17T18:36:33.676013Z"},"trusted":true},"execution_count":122,"outputs":[{"execution_count":122,"output_type":"execute_result","data":{"text/plain":"location\nUSA                    104\nNew York                71\nUnited States           50\nLondon                  45\nCanada                  29\n                      ... \nSome pum pum             1\nPaulton, England         1\nSEA Server               1\ntodaysbigstock.com       1\n???????? ?????????.      1\nName: count, Length: 3341, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"len(train[\"location\"].unique())","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.678000Z","iopub.execute_input":"2024-04-17T18:36:33.678297Z","iopub.status.idle":"2024-04-17T18:36:33.685748Z","shell.execute_reply.started":"2024-04-17T18:36:33.678272Z","shell.execute_reply":"2024-04-17T18:36:33.684625Z"},"trusted":true},"execution_count":123,"outputs":[{"execution_count":123,"output_type":"execute_result","data":{"text/plain":"3342"},"metadata":{}}]},{"cell_type":"code","source":"train[train[\"location\"]==\"USA\"][\"target\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.690282Z","iopub.execute_input":"2024-04-17T18:36:33.690648Z","iopub.status.idle":"2024-04-17T18:36:33.702430Z","shell.execute_reply.started":"2024-04-17T18:36:33.690621Z","shell.execute_reply":"2024-04-17T18:36:33.701551Z"},"trusted":true},"execution_count":124,"outputs":[{"execution_count":124,"output_type":"execute_result","data":{"text/plain":"target\n1    67\n0    37\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train[train[\"location\"]==\"United States\"][\"target\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.703813Z","iopub.execute_input":"2024-04-17T18:36:33.704177Z","iopub.status.idle":"2024-04-17T18:36:33.713764Z","shell.execute_reply.started":"2024-04-17T18:36:33.704146Z","shell.execute_reply":"2024-04-17T18:36:33.712811Z"},"trusted":true},"execution_count":125,"outputs":[{"execution_count":125,"output_type":"execute_result","data":{"text/plain":"target\n1    27\n0    23\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Seeing the values for the keyword col","metadata":{}},{"cell_type":"code","source":"train[\"keyword\"].unique()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.722013Z","iopub.execute_input":"2024-04-17T18:36:33.722300Z","iopub.status.idle":"2024-04-17T18:36:33.732747Z","shell.execute_reply.started":"2024-04-17T18:36:33.722276Z","shell.execute_reply":"2024-04-17T18:36:33.731817Z"},"trusted":true},"execution_count":127,"outputs":[{"execution_count":127,"output_type":"execute_result","data":{"text/plain":"array([nan, 'ablaze', 'accident', 'aftershock', 'airplane%20accident',\n       'ambulance', 'annihilated', 'annihilation', 'apocalypse',\n       'armageddon', 'army', 'arson', 'arsonist', 'attack', 'attacked',\n       'avalanche', 'battle', 'bioterror', 'bioterrorism', 'blaze',\n       'blazing', 'bleeding', 'blew%20up', 'blight', 'blizzard', 'blood',\n       'bloody', 'blown%20up', 'body%20bag', 'body%20bagging',\n       'body%20bags', 'bomb', 'bombed', 'bombing', 'bridge%20collapse',\n       'buildings%20burning', 'buildings%20on%20fire', 'burned',\n       'burning', 'burning%20buildings', 'bush%20fires', 'casualties',\n       'casualty', 'catastrophe', 'catastrophic', 'chemical%20emergency',\n       'cliff%20fall', 'collapse', 'collapsed', 'collide', 'collided',\n       'collision', 'crash', 'crashed', 'crush', 'crushed', 'curfew',\n       'cyclone', 'damage', 'danger', 'dead', 'death', 'deaths', 'debris',\n       'deluge', 'deluged', 'demolish', 'demolished', 'demolition',\n       'derail', 'derailed', 'derailment', 'desolate', 'desolation',\n       'destroy', 'destroyed', 'destruction', 'detonate', 'detonation',\n       'devastated', 'devastation', 'disaster', 'displaced', 'drought',\n       'drown', 'drowned', 'drowning', 'dust%20storm', 'earthquake',\n       'electrocute', 'electrocuted', 'emergency', 'emergency%20plan',\n       'emergency%20services', 'engulfed', 'epicentre', 'evacuate',\n       'evacuated', 'evacuation', 'explode', 'exploded', 'explosion',\n       'eyewitness', 'famine', 'fatal', 'fatalities', 'fatality', 'fear',\n       'fire', 'fire%20truck', 'first%20responders', 'flames',\n       'flattened', 'flood', 'flooding', 'floods', 'forest%20fire',\n       'forest%20fires', 'hail', 'hailstorm', 'harm', 'hazard',\n       'hazardous', 'heat%20wave', 'hellfire', 'hijack', 'hijacker',\n       'hijacking', 'hostage', 'hostages', 'hurricane', 'injured',\n       'injuries', 'injury', 'inundated', 'inundation', 'landslide',\n       'lava', 'lightning', 'loud%20bang', 'mass%20murder',\n       'mass%20murderer', 'massacre', 'mayhem', 'meltdown', 'military',\n       'mudslide', 'natural%20disaster', 'nuclear%20disaster',\n       'nuclear%20reactor', 'obliterate', 'obliterated', 'obliteration',\n       'oil%20spill', 'outbreak', 'pandemonium', 'panic', 'panicking',\n       'police', 'quarantine', 'quarantined', 'radiation%20emergency',\n       'rainstorm', 'razed', 'refugees', 'rescue', 'rescued', 'rescuers',\n       'riot', 'rioting', 'rubble', 'ruin', 'sandstorm', 'screamed',\n       'screaming', 'screams', 'seismic', 'sinkhole', 'sinking', 'siren',\n       'sirens', 'smoke', 'snowstorm', 'storm', 'stretcher',\n       'structural%20failure', 'suicide%20bomb', 'suicide%20bomber',\n       'suicide%20bombing', 'sunk', 'survive', 'survived', 'survivors',\n       'terrorism', 'terrorist', 'threat', 'thunder', 'thunderstorm',\n       'tornado', 'tragedy', 'trapped', 'trauma', 'traumatised',\n       'trouble', 'tsunami', 'twister', 'typhoon', 'upheaval',\n       'violent%20storm', 'volcano', 'war%20zone', 'weapon', 'weapons',\n       'whirlwind', 'wild%20fires', 'wildfire', 'windstorm', 'wounded',\n       'wounds', 'wreck', 'wreckage', 'wrecked'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"train[\"location\"].value_counts().sum()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.733975Z","iopub.execute_input":"2024-04-17T18:36:33.734380Z","iopub.status.idle":"2024-04-17T18:36:33.745554Z","shell.execute_reply.started":"2024-04-17T18:36:33.734328Z","shell.execute_reply":"2024-04-17T18:36:33.744562Z"},"trusted":true},"execution_count":128,"outputs":[{"execution_count":128,"output_type":"execute_result","data":{"text/plain":"5080"},"metadata":{}}]},{"cell_type":"code","source":"# the location attribute also has good amount of data that we can't lose","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.746829Z","iopub.execute_input":"2024-04-17T18:36:33.747207Z","iopub.status.idle":"2024-04-17T18:36:33.751936Z","shell.execute_reply.started":"2024-04-17T18:36:33.747172Z","shell.execute_reply":"2024-04-17T18:36:33.750937Z"},"trusted":true},"execution_count":129,"outputs":[]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.753112Z","iopub.execute_input":"2024-04-17T18:36:33.753490Z","iopub.status.idle":"2024-04-17T18:36:33.767735Z","shell.execute_reply.started":"2024-04-17T18:36:33.753465Z","shell.execute_reply":"2024-04-17T18:36:33.766559Z"},"trusted":true},"execution_count":130,"outputs":[{"execution_count":130,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Our Deeds are the Reason of this #earthquake M...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask. Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>All residents asked to 'shelter in place' are ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>13,000 people receive #wildfires evacuation or...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Starts Cleaning the text col","metadata":{}},{"cell_type":"markdown","source":"### creating the pipeline using the SpaCy","metadata":{}},{"cell_type":"code","source":"#Calling the pre-built language model \nnlp = spacy.load(\"en_core_web_lg\") #it's large model in english\nnlp(b'\\xe2\\x82\\xac'.decode('utf-8'))\n\n#creating the SpaCy pipeline\npipeline = spacy_cleaner.Cleaner(\n    nlp,# pre-built language model\n    removers.remove_email_token,\n    removers.remove_punctuation_token,\n    removers.remove_stopword_token,\n    removers.remove_url_token,\n    removers.remove_number_token,\n    mutators.mutate_lemma_token,\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:33.769089Z","iopub.execute_input":"2024-04-17T18:36:33.769484Z","iopub.status.idle":"2024-04-17T18:36:36.432330Z","shell.execute_reply.started":"2024-04-17T18:36:33.769457Z","shell.execute_reply":"2024-04-17T18:36:36.431508Z"},"trusted":true},"execution_count":131,"outputs":[]},{"cell_type":"markdown","source":"### Applying the pipeline to \"text\" attribute","metadata":{}},{"cell_type":"code","source":"%%time\ntrain[\"text\"] = pipeline.clean(train[\"text\"])\ntest[\"text\"] = pipeline.clean(test[\"text\"])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:36:36.433476Z","iopub.execute_input":"2024-04-17T18:36:36.433761Z","iopub.status.idle":"2024-04-17T18:37:07.356150Z","shell.execute_reply.started":"2024-04-17T18:36:36.433737Z","shell.execute_reply":"2024-04-17T18:37:07.355164Z"},"trusted":true},"execution_count":132,"outputs":[{"name":"stderr","text":"Cleaning Progress: 100%|██████████| 7613/7613 [00:21<00:00, 347.99it/s]\nCleaning Progress: 100%|██████████| 3263/3263 [00:09<00:00, 361.64it/s]","output_type":"stream"},{"name":"stdout","text":"CPU times: user 30.9 s, sys: 115 ms, total: 31 s\nWall time: 30.9 s\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.357359Z","iopub.execute_input":"2024-04-17T18:37:07.357679Z","iopub.status.idle":"2024-04-17T18:37:07.369062Z","shell.execute_reply.started":"2024-04-17T18:37:07.357654Z","shell.execute_reply":"2024-04-17T18:37:07.367897Z"},"trusted":true},"execution_count":133,"outputs":[{"execution_count":133,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1     NaN      NaN               deed reason earthquake ALLAH forgive   \n1   4     NaN      NaN              Forest fire near La Ronge Sask Canada   \n2   5     NaN      NaN  resident ask shelter place notify officer evac...   \n3   6     NaN      NaN  people receive wildfire evacuation order Calif...   \n4   7     NaN      NaN  get send photo Ruby Alaska smoke wildfire pour...   \n\n   target  \n0       1  \n1       1  \n2       1  \n3       1  \n4       1  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>deed reason earthquake ALLAH forgive</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask Canada</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>resident ask shelter place notify officer evac...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>people receive wildfire evacuation order Calif...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>get send photo Ruby Alaska smoke wildfire pour...</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Data preprocessing","metadata":{}},{"cell_type":"markdown","source":"### Defining the functions for the preprocessing","metadata":{}},{"cell_type":"code","source":"def remove_percent_20(text):\n    pattern = re.compile(r\"%20\")\n    return re.sub(pattern, \"\", text)\n\ndef extract_location(text):\n    loc = \"\"\n    doc = nlp(text)\n    location = [loc+ent.text for ent in doc.ents if ent.label_ in ['LOC','ORG','GPE']]\n    return location[0] if location else \"\"\n\ndef concat_columns(df,col1,col2,new_col_name):\n    df[new_col_name] = df[col1]+\" \"+df[col2]\n    return df\n\ndef remove_extra_spaces(text):\n    doc = nlp(text)\n    tokens = [token.text for token in doc if not token.is_space]\n    return \" \".join(tokens)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.370418Z","iopub.execute_input":"2024-04-17T18:37:07.370731Z","iopub.status.idle":"2024-04-17T18:37:07.379582Z","shell.execute_reply.started":"2024-04-17T18:37:07.370679Z","shell.execute_reply":"2024-04-17T18:37:07.378592Z"},"trusted":true},"execution_count":134,"outputs":[]},{"cell_type":"markdown","source":"## Filling the \"NA\" values","metadata":{}},{"cell_type":"code","source":"train[\"keyword\"].fillna(\"  \",inplace=True)\ntest[\"keyword\"].fillna(\"  \",inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.380856Z","iopub.execute_input":"2024-04-17T18:37:07.381181Z","iopub.status.idle":"2024-04-17T18:37:07.393401Z","shell.execute_reply.started":"2024-04-17T18:37:07.381156Z","shell.execute_reply":"2024-04-17T18:37:07.392411Z"},"trusted":true},"execution_count":135,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/2285907239.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train[\"keyword\"].fillna(\"  \",inplace=True)\n/tmp/ipykernel_34/2285907239.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test[\"keyword\"].fillna(\"  \",inplace=True)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Preprocessing the Keyword attributes","metadata":{}},{"cell_type":"code","source":"train[\"keyword\"] = train[\"keyword\"].apply(lambda x: remove_percent_20(x))\ntest[\"keyword\"] = test[\"keyword\"].apply(lambda x: remove_percent_20(x))","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.394780Z","iopub.execute_input":"2024-04-17T18:37:07.395107Z","iopub.status.idle":"2024-04-17T18:37:07.440853Z","shell.execute_reply.started":"2024-04-17T18:37:07.395069Z","shell.execute_reply":"2024-04-17T18:37:07.440179Z"},"trusted":true},"execution_count":136,"outputs":[]},{"cell_type":"code","source":"train[\"keyword\"].unique() ##See, it's clean now","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.441900Z","iopub.execute_input":"2024-04-17T18:37:07.442184Z","iopub.status.idle":"2024-04-17T18:37:07.450704Z","shell.execute_reply.started":"2024-04-17T18:37:07.442159Z","shell.execute_reply":"2024-04-17T18:37:07.449555Z"},"trusted":true},"execution_count":137,"outputs":[{"execution_count":137,"output_type":"execute_result","data":{"text/plain":"array(['  ', 'ablaze', 'accident', 'aftershock', 'airplaneaccident',\n       'ambulance', 'annihilated', 'annihilation', 'apocalypse',\n       'armageddon', 'army', 'arson', 'arsonist', 'attack', 'attacked',\n       'avalanche', 'battle', 'bioterror', 'bioterrorism', 'blaze',\n       'blazing', 'bleeding', 'blewup', 'blight', 'blizzard', 'blood',\n       'bloody', 'blownup', 'bodybag', 'bodybagging', 'bodybags', 'bomb',\n       'bombed', 'bombing', 'bridgecollapse', 'buildingsburning',\n       'buildingsonfire', 'burned', 'burning', 'burningbuildings',\n       'bushfires', 'casualties', 'casualty', 'catastrophe',\n       'catastrophic', 'chemicalemergency', 'clifffall', 'collapse',\n       'collapsed', 'collide', 'collided', 'collision', 'crash',\n       'crashed', 'crush', 'crushed', 'curfew', 'cyclone', 'damage',\n       'danger', 'dead', 'death', 'deaths', 'debris', 'deluge', 'deluged',\n       'demolish', 'demolished', 'demolition', 'derail', 'derailed',\n       'derailment', 'desolate', 'desolation', 'destroy', 'destroyed',\n       'destruction', 'detonate', 'detonation', 'devastated',\n       'devastation', 'disaster', 'displaced', 'drought', 'drown',\n       'drowned', 'drowning', 'duststorm', 'earthquake', 'electrocute',\n       'electrocuted', 'emergency', 'emergencyplan', 'emergencyservices',\n       'engulfed', 'epicentre', 'evacuate', 'evacuated', 'evacuation',\n       'explode', 'exploded', 'explosion', 'eyewitness', 'famine',\n       'fatal', 'fatalities', 'fatality', 'fear', 'fire', 'firetruck',\n       'firstresponders', 'flames', 'flattened', 'flood', 'flooding',\n       'floods', 'forestfire', 'forestfires', 'hail', 'hailstorm', 'harm',\n       'hazard', 'hazardous', 'heatwave', 'hellfire', 'hijack',\n       'hijacker', 'hijacking', 'hostage', 'hostages', 'hurricane',\n       'injured', 'injuries', 'injury', 'inundated', 'inundation',\n       'landslide', 'lava', 'lightning', 'loudbang', 'massmurder',\n       'massmurderer', 'massacre', 'mayhem', 'meltdown', 'military',\n       'mudslide', 'naturaldisaster', 'nucleardisaster', 'nuclearreactor',\n       'obliterate', 'obliterated', 'obliteration', 'oilspill',\n       'outbreak', 'pandemonium', 'panic', 'panicking', 'police',\n       'quarantine', 'quarantined', 'radiationemergency', 'rainstorm',\n       'razed', 'refugees', 'rescue', 'rescued', 'rescuers', 'riot',\n       'rioting', 'rubble', 'ruin', 'sandstorm', 'screamed', 'screaming',\n       'screams', 'seismic', 'sinkhole', 'sinking', 'siren', 'sirens',\n       'smoke', 'snowstorm', 'storm', 'stretcher', 'structuralfailure',\n       'suicidebomb', 'suicidebomber', 'suicidebombing', 'sunk',\n       'survive', 'survived', 'survivors', 'terrorism', 'terrorist',\n       'threat', 'thunder', 'thunderstorm', 'tornado', 'tragedy',\n       'trapped', 'trauma', 'traumatised', 'trouble', 'tsunami',\n       'twister', 'typhoon', 'upheaval', 'violentstorm', 'volcano',\n       'warzone', 'weapon', 'weapons', 'whirlwind', 'wildfires',\n       'wildfire', 'windstorm', 'wounded', 'wounds', 'wreck', 'wreckage',\n       'wrecked'], dtype=object)"},"metadata":{}}]},{"cell_type":"markdown","source":"### Concat columns after cleaning","metadata":{}},{"cell_type":"code","source":"train = concat_columns(train,\"text\",\"keyword\",\"text_key\")\ntest = concat_columns(test,\"text\",\"keyword\",\"text_key\")","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.451985Z","iopub.execute_input":"2024-04-17T18:37:07.452341Z","iopub.status.idle":"2024-04-17T18:37:07.464353Z","shell.execute_reply.started":"2024-04-17T18:37:07.452294Z","shell.execute_reply":"2024-04-17T18:37:07.463429Z"},"trusted":true},"execution_count":138,"outputs":[]},{"cell_type":"code","source":"test.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.465786Z","iopub.execute_input":"2024-04-17T18:37:07.466490Z","iopub.status.idle":"2024-04-17T18:37:07.480524Z","shell.execute_reply.started":"2024-04-17T18:37:07.466451Z","shell.execute_reply":"2024-04-17T18:37:07.479511Z"},"trusted":true},"execution_count":139,"outputs":[{"execution_count":139,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                          text  \\\n0   0              NaN                     happen terrible car crash   \n1   2              NaN      hear earthquake different city stay safe   \n2   3              NaN  forest fire spot pond goose flee street save   \n3   9              NaN          Apocalypse lighting Spokane wildfire   \n4  11              NaN            Typhoon Soudelor kill China Taiwan   \n\n                                          text_key  \n0                     happen terrible car crash     \n1      hear earthquake different city stay safe     \n2  forest fire spot pond goose flee street save     \n3          Apocalypse lighting Spokane wildfire     \n4            Typhoon Soudelor kill China Taiwan     ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>text_key</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td></td>\n      <td>NaN</td>\n      <td>happen terrible car crash</td>\n      <td>happen terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td></td>\n      <td>NaN</td>\n      <td>hear earthquake different city stay safe</td>\n      <td>hear earthquake different city stay safe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td></td>\n      <td>NaN</td>\n      <td>forest fire spot pond goose flee street save</td>\n      <td>forest fire spot pond goose flee street save</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>9</td>\n      <td></td>\n      <td>NaN</td>\n      <td>Apocalypse lighting Spokane wildfire</td>\n      <td>Apocalypse lighting Spokane wildfire</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>11</td>\n      <td></td>\n      <td>NaN</td>\n      <td>Typhoon Soudelor kill China Taiwan</td>\n      <td>Typhoon Soudelor kill China Taiwan</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.481861Z","iopub.execute_input":"2024-04-17T18:37:07.482271Z","iopub.status.idle":"2024-04-17T18:37:07.495549Z","shell.execute_reply.started":"2024-04-17T18:37:07.482242Z","shell.execute_reply":"2024-04-17T18:37:07.494413Z"},"trusted":true},"execution_count":140,"outputs":[{"execution_count":140,"output_type":"execute_result","data":{"text/plain":"   id keyword location                                               text  \\\n0   1              NaN               deed reason earthquake ALLAH forgive   \n1   4              NaN              Forest fire near La Ronge Sask Canada   \n2   5              NaN  resident ask shelter place notify officer evac...   \n3   6              NaN  people receive wildfire evacuation order Calif...   \n4   7              NaN  get send photo Ruby Alaska smoke wildfire pour...   \n\n   target                                           text_key  \n0       1            deed reason earthquake ALLAH forgive     \n1       1           Forest fire near La Ronge Sask Canada     \n2       1  resident ask shelter place notify officer evac...  \n3       1  people receive wildfire evacuation order Calif...  \n4       1  get send photo Ruby Alaska smoke wildfire pour...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>keyword</th>\n      <th>location</th>\n      <th>text</th>\n      <th>target</th>\n      <th>text_key</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td></td>\n      <td>NaN</td>\n      <td>deed reason earthquake ALLAH forgive</td>\n      <td>1</td>\n      <td>deed reason earthquake ALLAH forgive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4</td>\n      <td></td>\n      <td>NaN</td>\n      <td>Forest fire near La Ronge Sask Canada</td>\n      <td>1</td>\n      <td>Forest fire near La Ronge Sask Canada</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>5</td>\n      <td></td>\n      <td>NaN</td>\n      <td>resident ask shelter place notify officer evac...</td>\n      <td>1</td>\n      <td>resident ask shelter place notify officer evac...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td></td>\n      <td>NaN</td>\n      <td>people receive wildfire evacuation order Calif...</td>\n      <td>1</td>\n      <td>people receive wildfire evacuation order Calif...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>7</td>\n      <td></td>\n      <td>NaN</td>\n      <td>get send photo Ruby Alaska smoke wildfire pour...</td>\n      <td>1</td>\n      <td>get send photo Ruby Alaska smoke wildfire pour...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Droping unnecessary columns","metadata":{}},{"cell_type":"code","source":"train.drop([\"text\",\"keyword\",\"id\"],axis=1,inplace = True)\ntest.drop([\"text\",\"keyword\",\"id\"],axis=1,inplace = True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.497124Z","iopub.execute_input":"2024-04-17T18:37:07.497516Z","iopub.status.idle":"2024-04-17T18:37:07.505421Z","shell.execute_reply.started":"2024-04-17T18:37:07.497488Z","shell.execute_reply":"2024-04-17T18:37:07.504435Z"},"trusted":true},"execution_count":141,"outputs":[]},{"cell_type":"code","source":"test.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.513344Z","iopub.execute_input":"2024-04-17T18:37:07.513754Z","iopub.status.idle":"2024-04-17T18:37:07.523947Z","shell.execute_reply.started":"2024-04-17T18:37:07.513725Z","shell.execute_reply":"2024-04-17T18:37:07.522791Z"},"trusted":true},"execution_count":142,"outputs":[{"execution_count":142,"output_type":"execute_result","data":{"text/plain":"  location                                         text_key\n0      NaN                     happen terrible car crash   \n1      NaN      hear earthquake different city stay safe   \n2      NaN  forest fire spot pond goose flee street save   \n3      NaN          Apocalypse lighting Spokane wildfire   \n4      NaN            Typhoon Soudelor kill China Taiwan   ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>text_key</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>NaN</td>\n      <td>happen terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NaN</td>\n      <td>hear earthquake different city stay safe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>NaN</td>\n      <td>forest fire spot pond goose flee street save</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>NaN</td>\n      <td>Apocalypse lighting Spokane wildfire</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>Typhoon Soudelor kill China Taiwan</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train[\"location\"].unique() ## the location column is not so good","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.525256Z","iopub.execute_input":"2024-04-17T18:37:07.525614Z","iopub.status.idle":"2024-04-17T18:37:07.534696Z","shell.execute_reply.started":"2024-04-17T18:37:07.525587Z","shell.execute_reply":"2024-04-17T18:37:07.533692Z"},"trusted":true},"execution_count":143,"outputs":[{"execution_count":143,"output_type":"execute_result","data":{"text/plain":"array([nan, 'Birmingham', 'Est. September 2012 - Bristol', ...,\n       'Vancouver, Canada', 'London ', 'Lincoln'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"## We need to extract the text from the locations columns ,\n## So we are going to use the SpaCy to extract the exact location.","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.535949Z","iopub.execute_input":"2024-04-17T18:37:07.536295Z","iopub.status.idle":"2024-04-17T18:37:07.541903Z","shell.execute_reply.started":"2024-04-17T18:37:07.536270Z","shell.execute_reply":"2024-04-17T18:37:07.540968Z"},"trusted":true},"execution_count":144,"outputs":[]},{"cell_type":"code","source":"train[\"location\"].fillna(\"  \",inplace=True)\ntest[\"location\"].fillna(\"  \",inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.543053Z","iopub.execute_input":"2024-04-17T18:37:07.543343Z","iopub.status.idle":"2024-04-17T18:37:07.552532Z","shell.execute_reply.started":"2024-04-17T18:37:07.543314Z","shell.execute_reply":"2024-04-17T18:37:07.551431Z"},"trusted":true},"execution_count":145,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_34/1159647681.py:1: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  train[\"location\"].fillna(\"  \",inplace=True)\n/tmp/ipykernel_34/1159647681.py:2: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\nThe behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n\nFor example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n\n\n  test[\"location\"].fillna(\"  \",inplace=True)\n","output_type":"stream"}]},{"cell_type":"code","source":"for ent in nlp(train[\"location\"][101]).ents:\n    print(ent.label_) ## SO location can be notated with \"GPE\"- GeoPoliticalEntities","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.554019Z","iopub.execute_input":"2024-04-17T18:37:07.554388Z","iopub.status.idle":"2024-04-17T18:37:07.568979Z","shell.execute_reply.started":"2024-04-17T18:37:07.554336Z","shell.execute_reply":"2024-04-17T18:37:07.567963Z"},"trusted":true},"execution_count":146,"outputs":[{"name":"stdout","text":"GPE\nGPE\n","output_type":"stream"}]},{"cell_type":"code","source":"extract_location(train[\"location\"][100])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.570052Z","iopub.execute_input":"2024-04-17T18:37:07.570360Z","iopub.status.idle":"2024-04-17T18:37:07.585558Z","shell.execute_reply.started":"2024-04-17T18:37:07.570334Z","shell.execute_reply":"2024-04-17T18:37:07.584618Z"},"trusted":true},"execution_count":147,"outputs":[{"execution_count":147,"output_type":"execute_result","data":{"text/plain":"'UK'"},"metadata":{}}]},{"cell_type":"code","source":"extract_location(train[\"location\"][101])","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.586818Z","iopub.execute_input":"2024-04-17T18:37:07.587630Z","iopub.status.idle":"2024-04-17T18:37:07.601551Z","shell.execute_reply.started":"2024-04-17T18:37:07.587604Z","shell.execute_reply":"2024-04-17T18:37:07.600626Z"},"trusted":true},"execution_count":148,"outputs":[{"execution_count":148,"output_type":"execute_result","data":{"text/plain":"'Nairobi'"},"metadata":{}}]},{"cell_type":"code","source":"test.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.602748Z","iopub.execute_input":"2024-04-17T18:37:07.603077Z","iopub.status.idle":"2024-04-17T18:37:07.613440Z","shell.execute_reply.started":"2024-04-17T18:37:07.603050Z","shell.execute_reply":"2024-04-17T18:37:07.612295Z"},"trusted":true},"execution_count":149,"outputs":[{"execution_count":149,"output_type":"execute_result","data":{"text/plain":"  location                                         text_key\n0                              happen terrible car crash   \n1               hear earthquake different city stay safe   \n2           forest fire spot pond goose flee street save   \n3                   Apocalypse lighting Spokane wildfire   \n4                     Typhoon Soudelor kill China Taiwan   ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>text_key</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>happen terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>hear earthquake different city stay safe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>forest fire spot pond goose flee street save</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>Apocalypse lighting Spokane wildfire</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>Typhoon Soudelor kill China Taiwan</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Extracting locations","metadata":{}},{"cell_type":"code","source":"%%time\ntrain[\"exa_loc\"] = train[\"location\"].apply(lambda x: extract_location(x))\ntest[\"exa_loc\"] = test[\"location\"].apply(lambda x: extract_location(x))","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:37:07.614888Z","iopub.execute_input":"2024-04-17T18:37:07.615291Z","iopub.status.idle":"2024-04-17T18:38:08.977966Z","shell.execute_reply.started":"2024-04-17T18:37:07.615256Z","shell.execute_reply":"2024-04-17T18:38:08.976830Z"},"trusted":true},"execution_count":150,"outputs":[{"name":"stdout","text":"CPU times: user 1min 1s, sys: 64.4 ms, total: 1min 1s\nWall time: 1min 1s\n","output_type":"stream"}]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:08.979605Z","iopub.execute_input":"2024-04-17T18:38:08.980043Z","iopub.status.idle":"2024-04-17T18:38:08.992421Z","shell.execute_reply.started":"2024-04-17T18:38:08.980002Z","shell.execute_reply":"2024-04-17T18:38:08.991353Z"},"trusted":true},"execution_count":151,"outputs":[{"execution_count":151,"output_type":"execute_result","data":{"text/plain":"  location  target                                           text_key exa_loc\n0                1            deed reason earthquake ALLAH forgive           \n1                1           Forest fire near La Ronge Sask Canada           \n2                1  resident ask shelter place notify officer evac...        \n3                1  people receive wildfire evacuation order Calif...        \n4                1  get send photo Ruby Alaska smoke wildfire pour...        ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>target</th>\n      <th>text_key</th>\n      <th>exa_loc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>1</td>\n      <td>deed reason earthquake ALLAH forgive</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>1</td>\n      <td>Forest fire near La Ronge Sask Canada</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>1</td>\n      <td>resident ask shelter place notify officer evac...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>1</td>\n      <td>people receive wildfire evacuation order Calif...</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>1</td>\n      <td>get send photo Ruby Alaska smoke wildfire pour...</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:08.993728Z","iopub.execute_input":"2024-04-17T18:38:08.994049Z","iopub.status.idle":"2024-04-17T18:38:09.008079Z","shell.execute_reply.started":"2024-04-17T18:38:08.994017Z","shell.execute_reply":"2024-04-17T18:38:09.006946Z"},"trusted":true},"execution_count":152,"outputs":[{"execution_count":152,"output_type":"execute_result","data":{"text/plain":"  location                                         text_key exa_loc\n0                              happen terrible car crash           \n1               hear earthquake different city stay safe           \n2           forest fire spot pond goose flee street save           \n3                   Apocalypse lighting Spokane wildfire           \n4                     Typhoon Soudelor kill China Taiwan           ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>text_key</th>\n      <th>exa_loc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>happen terrible car crash</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>hear earthquake different city stay safe</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>forest fire spot pond goose flee street save</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>Apocalypse lighting Spokane wildfire</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>Typhoon Soudelor kill China Taiwan</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### Again joining and removing the columns with data","metadata":{}},{"cell_type":"code","source":"train = concat_columns(train,\"exa_loc\",\"text_key\",\"text_key_loc\")\ntest = concat_columns(test,\"exa_loc\",\"text_key\",\"text_key_loc\")","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:09.009576Z","iopub.execute_input":"2024-04-17T18:38:09.009975Z","iopub.status.idle":"2024-04-17T18:38:09.021399Z","shell.execute_reply.started":"2024-04-17T18:38:09.009946Z","shell.execute_reply":"2024-04-17T18:38:09.020550Z"},"trusted":true},"execution_count":153,"outputs":[]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:09.022742Z","iopub.execute_input":"2024-04-17T18:38:09.023120Z","iopub.status.idle":"2024-04-17T18:38:09.037196Z","shell.execute_reply.started":"2024-04-17T18:38:09.023085Z","shell.execute_reply":"2024-04-17T18:38:09.036095Z"},"trusted":true},"execution_count":154,"outputs":[{"execution_count":154,"output_type":"execute_result","data":{"text/plain":"  location  target                                           text_key exa_loc  \\\n0                1            deed reason earthquake ALLAH forgive              \n1                1           Forest fire near La Ronge Sask Canada              \n2                1  resident ask shelter place notify officer evac...           \n3                1  people receive wildfire evacuation order Calif...           \n4                1  get send photo Ruby Alaska smoke wildfire pour...           \n\n                                        text_key_loc  \n0            deed reason earthquake ALLAH forgive     \n1           Forest fire near La Ronge Sask Canada     \n2   resident ask shelter place notify officer eva...  \n3   people receive wildfire evacuation order Cali...  \n4   get send photo Ruby Alaska smoke wildfire pou...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>location</th>\n      <th>target</th>\n      <th>text_key</th>\n      <th>exa_loc</th>\n      <th>text_key_loc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td></td>\n      <td>1</td>\n      <td>deed reason earthquake ALLAH forgive</td>\n      <td></td>\n      <td>deed reason earthquake ALLAH forgive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td></td>\n      <td>1</td>\n      <td>Forest fire near La Ronge Sask Canada</td>\n      <td></td>\n      <td>Forest fire near La Ronge Sask Canada</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td></td>\n      <td>1</td>\n      <td>resident ask shelter place notify officer evac...</td>\n      <td></td>\n      <td>resident ask shelter place notify officer eva...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td></td>\n      <td>1</td>\n      <td>people receive wildfire evacuation order Calif...</td>\n      <td></td>\n      <td>people receive wildfire evacuation order Cali...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td></td>\n      <td>1</td>\n      <td>get send photo Ruby Alaska smoke wildfire pour...</td>\n      <td></td>\n      <td>get send photo Ruby Alaska smoke wildfire pou...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train.drop([\"location\",\"text_key\",\"exa_loc\"],axis=1,inplace=True)\ntest.drop([\"location\",\"text_key\",\"exa_loc\"],axis=1,inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:09.038612Z","iopub.execute_input":"2024-04-17T18:38:09.039018Z","iopub.status.idle":"2024-04-17T18:38:09.046635Z","shell.execute_reply.started":"2024-04-17T18:38:09.038978Z","shell.execute_reply":"2024-04-17T18:38:09.045586Z"},"trusted":true},"execution_count":155,"outputs":[]},{"cell_type":"code","source":"# train.head(5)\ntest.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:09.047897Z","iopub.execute_input":"2024-04-17T18:38:09.048524Z","iopub.status.idle":"2024-04-17T18:38:09.061205Z","shell.execute_reply.started":"2024-04-17T18:38:09.048489Z","shell.execute_reply":"2024-04-17T18:38:09.060153Z"},"trusted":true},"execution_count":156,"outputs":[{"execution_count":156,"output_type":"execute_result","data":{"text/plain":"                                       text_key_loc\n0                      happen terrible car crash   \n1       hear earthquake different city stay safe   \n2   forest fire spot pond goose flee street save   \n3           Apocalypse lighting Spokane wildfire   \n4             Typhoon Soudelor kill China Taiwan   ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text_key_loc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>happen terrible car crash</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>hear earthquake different city stay safe</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>forest fire spot pond goose flee street save</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Apocalypse lighting Spokane wildfire</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Typhoon Soudelor kill China Taiwan</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"### removing the extra spaces that we added above","metadata":{}},{"cell_type":"code","source":"%%time\ntrain[\"text_key_loc\"] = train[\"text_key_loc\"].apply(remove_extra_spaces)\ntest[\"text_key_loc\"] = test[\"text_key_loc\"].apply(remove_extra_spaces)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:38:09.062707Z","iopub.execute_input":"2024-04-17T18:38:09.063671Z","iopub.status.idle":"2024-04-17T18:39:25.054523Z","shell.execute_reply.started":"2024-04-17T18:38:09.063630Z","shell.execute_reply":"2024-04-17T18:39:25.053419Z"},"trusted":true},"execution_count":157,"outputs":[{"name":"stdout","text":"CPU times: user 1min 16s, sys: 67.7 ms, total: 1min 16s\nWall time: 1min 15s\n","output_type":"stream"}]},{"cell_type":"code","source":"train[\"text_key_loc\"] = train[\"text_key_loc\"].str.lower()\ntest[\"text_key_loc\"] = test[\"text_key_loc\"].str.lower()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:25.055866Z","iopub.execute_input":"2024-04-17T18:39:25.056193Z","iopub.status.idle":"2024-04-17T18:39:25.068295Z","shell.execute_reply.started":"2024-04-17T18:39:25.056165Z","shell.execute_reply":"2024-04-17T18:39:25.067344Z"},"trusted":true},"execution_count":158,"outputs":[]},{"cell_type":"code","source":"train.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:25.069475Z","iopub.execute_input":"2024-04-17T18:39:25.069803Z","iopub.status.idle":"2024-04-17T18:39:25.083347Z","shell.execute_reply.started":"2024-04-17T18:39:25.069775Z","shell.execute_reply":"2024-04-17T18:39:25.082344Z"},"trusted":true},"execution_count":159,"outputs":[{"execution_count":159,"output_type":"execute_result","data":{"text/plain":"   target                                       text_key_loc\n0       1               deed reason earthquake allah forgive\n1       1              forest fire near la ronge sask canada\n2       1  resident ask shelter place notify officer evac...\n3       1  people receive wildfire evacuation order calif...\n4       1  get send photo ruby alaska smoke wildfire pour...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>target</th>\n      <th>text_key_loc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>deed reason earthquake allah forgive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>forest fire near la ronge sask canada</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>resident ask shelter place notify officer evac...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>people receive wildfire evacuation order calif...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>get send photo ruby alaska smoke wildfire pour...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"train[\"target\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:25.084535Z","iopub.execute_input":"2024-04-17T18:39:25.084867Z","iopub.status.idle":"2024-04-17T18:39:25.094171Z","shell.execute_reply.started":"2024-04-17T18:39:25.084840Z","shell.execute_reply":"2024-04-17T18:39:25.093190Z"},"trusted":true},"execution_count":160,"outputs":[{"execution_count":160,"output_type":"execute_result","data":{"text/plain":"target\n0    4342\n1    3271\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"## Building the language model using Distilbert","metadata":{}},{"cell_type":"code","source":"model = \"distilbert/distilbert-base-uncased\"\nlearning_rate = 2e-5\nepochs = 10\n\ntrain_split, valid_split = train_test_split(\n    train, test_size=0.2\n)  # sppliting the data for train and valid","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:25.095463Z","iopub.execute_input":"2024-04-17T18:39:25.095925Z","iopub.status.idle":"2024-04-17T18:39:25.103406Z","shell.execute_reply.started":"2024-04-17T18:39:25.095878Z","shell.execute_reply":"2024-04-17T18:39:25.102490Z"},"trusted":true},"execution_count":161,"outputs":[]},{"cell_type":"markdown","source":"### setting up the tokenzier","metadata":{}},{"cell_type":"code","source":"tokenizer = AutoTokenizer.from_pretrained(\n    model\n)  # Maping the TOkenizer for the model classification\ntrain_ds = Dataset.from_pandas(train_split)\nvalid_ds = Dataset.from_pandas(valid_split)\ntest_ds = Dataset.from_pandas(test)\n\n\ndef process_token(example, tokenizer=tokenizer):\n    return tokenizer(example[\"text_key_loc\"])\n\n\ntokenized_train = train_ds.map(process_token)\ntokenized_valid = valid_ds.map(process_token)\ntokenized_test = test_ds.map(process_token)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:25.104667Z","iopub.execute_input":"2024-04-17T18:39:25.105004Z","iopub.status.idle":"2024-04-17T18:39:27.616385Z","shell.execute_reply.started":"2024-04-17T18:39:25.104976Z","shell.execute_reply":"2024-04-17T18:39:27.615490Z"},"trusted":true},"execution_count":162,"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/6090 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8666336569644fd7979010834238c1aa"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/1523 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6ccbc0cec4454b06934299b8039ebd45"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/3263 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7c0da8f307d64fb1a1c8fab8b1ccfab3"}},"metadata":{}}]},{"cell_type":"markdown","source":"### getting the required columns","metadata":{}},{"cell_type":"code","source":"columns_to_remove = [\"__index_level_0__\"]\ntrain_dataset = tokenized_train.remove_columns(columns_to_remove)\nvalid_dataset = tokenized_valid.remove_columns(columns_to_remove)\ntest_dataset = tokenized_test","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:27.617539Z","iopub.execute_input":"2024-04-17T18:39:27.617807Z","iopub.status.idle":"2024-04-17T18:39:27.626443Z","shell.execute_reply.started":"2024-04-17T18:39:27.617782Z","shell.execute_reply":"2024-04-17T18:39:27.625660Z"},"trusted":true},"execution_count":163,"outputs":[]},{"cell_type":"code","source":"train_dataset = train_dataset.rename_column(\"target\", \"label\")\nvalid_dataset = valid_dataset.rename_column(\"target\", \"label\")","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:27.627670Z","iopub.execute_input":"2024-04-17T18:39:27.627991Z","iopub.status.idle":"2024-04-17T18:39:27.638840Z","shell.execute_reply.started":"2024-04-17T18:39:27.627967Z","shell.execute_reply":"2024-04-17T18:39:27.637997Z"},"trusted":true},"execution_count":164,"outputs":[]},{"cell_type":"code","source":"def compute_metrics(eval_pred):\n    load_acc = load_metric(\"accuracy\")\n    load_f1 = load_metric(\"f1\")\n    logits, labels = eval_pred\n    predictions = np.argmax(logits, axis=-1)\n    acc = load_acc.compute(predictions=predictions, references=labels)[\"accuracy\"]\n    f1 = load_f1.compute(predictions=predictions, references=labels)[\"f1\"]\n    print(\"Accuracy:\" + acc, \"F1:\" + f1)\n    return {\"acc\": acc, \"f1\": f1}","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:27.640058Z","iopub.execute_input":"2024-04-17T18:39:27.640398Z","iopub.status.idle":"2024-04-17T18:39:27.648523Z","shell.execute_reply.started":"2024-04-17T18:39:27.640353Z","shell.execute_reply":"2024-04-17T18:39:27.647633Z"},"trusted":true},"execution_count":165,"outputs":[]},{"cell_type":"markdown","source":"### Model metrics for training","metadata":{}},{"cell_type":"code","source":"model = AutoModelForSequenceClassification.from_pretrained(model)\ndata_collator = DataCollatorWithPadding(tokenizer=tokenizer)\ntraining_args = TrainingArguments(\n    learning_rate=learning_rate,\n    num_train_epochs=epochs,\n    per_device_train_batch_size=16,\n    weight_decay=0.01,\n    logging_steps=200,\n    output_dir=\"/kaggle/working/distilbert\",\n)\ntrainer = Trainer(\n    model=model,\n    args=training_args,\n    train_dataset=train_dataset,\n    eval_dataset=valid_dataset,\n    data_collator=data_collator,\n    compute_metrics=compute_metrics,\n)","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:27.649734Z","iopub.execute_input":"2024-04-17T18:39:27.650009Z","iopub.status.idle":"2024-04-17T18:39:27.955850Z","shell.execute_reply.started":"2024-04-17T18:39:27.649987Z","shell.execute_reply":"2024-04-17T18:39:27.954723Z"},"trusted":true},"execution_count":166,"outputs":[{"name":"stderr","text":"Some weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert/distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\nUsing the `WANDB_DISABLED` environment variable is deprecated and will be removed in v5. Use the --report_to flag to control the integrations used for logging result (for instance --report_to none).\n/opt/conda/lib/python3.10/site-packages/accelerate/accelerator.py:432: FutureWarning: Passing the following arguments to `Accelerator` is deprecated and will be removed in version 1.0 of Accelerate: dict_keys(['dispatch_batches', 'split_batches', 'even_batches', 'use_seedable_sampler']). Please pass an `accelerate.DataLoaderConfiguration` instead: \ndataloader_config = DataLoaderConfiguration(dispatch_batches=None, split_batches=False, even_batches=True, use_seedable_sampler=True)\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"trainer.args","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:27.957222Z","iopub.execute_input":"2024-04-17T18:39:27.957645Z","iopub.status.idle":"2024-04-17T18:39:27.965109Z","shell.execute_reply.started":"2024-04-17T18:39:27.957612Z","shell.execute_reply":"2024-04-17T18:39:27.964200Z"},"trusted":true},"execution_count":167,"outputs":[{"execution_count":167,"output_type":"execute_result","data":{"text/plain":"TrainingArguments(\n_n_gpu=2,\naccelerator_config={'split_batches': False, 'dispatch_batches': None, 'even_batches': True, 'use_seedable_sampler': True},\nadafactor=False,\nadam_beta1=0.9,\nadam_beta2=0.999,\nadam_epsilon=1e-08,\nauto_find_batch_size=False,\nbf16=False,\nbf16_full_eval=False,\ndata_seed=None,\ndataloader_drop_last=False,\ndataloader_num_workers=0,\ndataloader_persistent_workers=False,\ndataloader_pin_memory=True,\ndataloader_prefetch_factor=None,\nddp_backend=None,\nddp_broadcast_buffers=None,\nddp_bucket_cap_mb=None,\nddp_find_unused_parameters=None,\nddp_timeout=1800,\ndebug=[],\ndeepspeed=None,\ndisable_tqdm=False,\ndispatch_batches=None,\ndo_eval=False,\ndo_predict=False,\ndo_train=False,\neval_accumulation_steps=None,\neval_delay=0,\neval_steps=None,\nevaluation_strategy=no,\nfp16=False,\nfp16_backend=auto,\nfp16_full_eval=False,\nfp16_opt_level=O1,\nfsdp=[],\nfsdp_config={'min_num_params': 0, 'xla': False, 'xla_fsdp_v2': False, 'xla_fsdp_grad_ckpt': False},\nfsdp_min_num_params=0,\nfsdp_transformer_layer_cls_to_wrap=None,\nfull_determinism=False,\ngradient_accumulation_steps=1,\ngradient_checkpointing=False,\ngradient_checkpointing_kwargs=None,\ngreater_is_better=None,\ngroup_by_length=False,\nhalf_precision_backend=auto,\nhub_always_push=False,\nhub_model_id=None,\nhub_private_repo=False,\nhub_strategy=every_save,\nhub_token=<HUB_TOKEN>,\nignore_data_skip=False,\ninclude_inputs_for_metrics=False,\ninclude_num_input_tokens_seen=False,\ninclude_tokens_per_second=False,\njit_mode_eval=False,\nlabel_names=None,\nlabel_smoothing_factor=0.0,\nlearning_rate=2e-05,\nlength_column_name=length,\nload_best_model_at_end=False,\nlocal_rank=0,\nlog_level=passive,\nlog_level_replica=warning,\nlog_on_each_node=True,\nlogging_dir=/kaggle/working/distilbert/runs/Apr17_18-39-27_f9c4e5c58f32,\nlogging_first_step=False,\nlogging_nan_inf_filter=True,\nlogging_steps=500,\nlogging_strategy=steps,\nlr_scheduler_kwargs={},\nlr_scheduler_type=linear,\nmax_grad_norm=1.0,\nmax_steps=-1,\nmetric_for_best_model=None,\nmp_parameters=,\nneftune_noise_alpha=None,\nno_cuda=False,\nnum_train_epochs=10,\noptim=adamw_torch,\noptim_args=None,\noptim_target_modules=None,\noutput_dir=/kaggle/working/distilbert,\noverwrite_output_dir=False,\npast_index=-1,\nper_device_eval_batch_size=8,\nper_device_train_batch_size=16,\nprediction_loss_only=False,\npush_to_hub=False,\npush_to_hub_model_id=None,\npush_to_hub_organization=None,\npush_to_hub_token=<PUSH_TO_HUB_TOKEN>,\nray_scope=last,\nremove_unused_columns=True,\nreport_to=['tensorboard'],\nresume_from_checkpoint=None,\nrun_name=/kaggle/working/distilbert,\nsave_on_each_node=False,\nsave_only_model=False,\nsave_safetensors=True,\nsave_steps=200,\nsave_strategy=steps,\nsave_total_limit=None,\nseed=42,\nskip_memory_metrics=True,\nsplit_batches=None,\ntf32=None,\ntorch_compile=False,\ntorch_compile_backend=None,\ntorch_compile_mode=None,\ntorchdynamo=None,\ntpu_metrics_debug=False,\ntpu_num_cores=None,\nuse_cpu=False,\nuse_ipex=False,\nuse_legacy_prediction_loop=False,\nuse_mps_device=False,\nwarmup_ratio=0.0,\nwarmup_steps=0,\nweight_decay=0.01,\n)"},"metadata":{}}]},{"cell_type":"markdown","source":"### Training the model","metadata":{}},{"cell_type":"code","source":"%%time\ntrainer.train()","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:39:27.966598Z","iopub.execute_input":"2024-04-17T18:39:27.967184Z","iopub.status.idle":"2024-04-17T18:43:24.909935Z","shell.execute_reply.started":"2024-04-17T18:39:27.967156Z","shell.execute_reply":"2024-04-17T18:43:24.908944Z"},"trusted":true},"execution_count":168,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='1910' max='1910' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [1910/1910 03:55, Epoch 10/10]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Step</th>\n      <th>Training Loss</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>500</td>\n      <td>0.400600</td>\n    </tr>\n    <tr>\n      <td>1000</td>\n      <td>0.227700</td>\n    </tr>\n    <tr>\n      <td>1500</td>\n      <td>0.117100</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n/opt/conda/lib/python3.10/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n  warnings.warn('Was asked to gather along dimension 0, but all '\n","output_type":"stream"},{"name":"stdout","text":"CPU times: user 4min 15s, sys: 13 s, total: 4min 28s\nWall time: 3min 56s\n","output_type":"stream"},{"execution_count":168,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=1910, training_loss=0.21097578777692705, metrics={'train_runtime': 235.9922, 'train_samples_per_second': 258.059, 'train_steps_per_second': 8.093, 'total_flos': 519645284741016.0, 'train_loss': 0.21097578777692705, 'epoch': 10.0})"},"metadata":{}}]},{"cell_type":"markdown","source":"## Predicting and Creating the Submission File","metadata":{}},{"cell_type":"code","source":"predictions = trainer.predict(test_dataset=test_dataset)\n\nprint(predictions.predictions[0])\n\npredictions_Strength_Class = np.argmax(\n    predictions.predictions, axis=1\n)  # Return the indexof the max value class","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:43:24.911322Z","iopub.execute_input":"2024-04-17T18:43:24.911678Z","iopub.status.idle":"2024-04-17T18:43:32.246693Z","shell.execute_reply.started":"2024-04-17T18:43:24.911650Z","shell.execute_reply":"2024-04-17T18:43:32.245618Z"},"trusted":true},"execution_count":169,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"[-2.5719006  2.7366304]\n","output_type":"stream"}]},{"cell_type":"code","source":"submission = pd.read_csv(\"/kaggle/input/nlp-getting-started/sample_submission.csv\")\nsubmission[\"target\"] = predictions_Strength_Class\nsubmission = submission.set_index(\"id\", drop=True)\nsubmission.to_csv(\"/kaggle/working/submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-04-17T18:43:32.248408Z","iopub.execute_input":"2024-04-17T18:43:32.249248Z","iopub.status.idle":"2024-04-17T18:43:32.267105Z","shell.execute_reply.started":"2024-04-17T18:43:32.249206Z","shell.execute_reply":"2024-04-17T18:43:32.266239Z"},"trusted":true},"execution_count":170,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}